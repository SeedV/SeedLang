import re
import xml.etree.ElementTree as ET

key_summary = 'summary'
key_members = {'F': 'fields', 'M': 'methods', 'P': 'properties'}


def parse(path, types):
    tree = ET.parse(path)
    for member in tree.iter('member'):
        parse_member(member, types)


def parse_member(member, types):
    name = member.attrib['name']
    # Ignores classes generated by ANTLR.
    if '`1' in name:
        return
    (type_name, member_name) = split_name(name[2:])
    if name[0] == 'T':
        type = {}
        parse_summary(member, type)
        types[member_name] = type
    else:
        item = {}
        parse_summary(member, item)
        type = types[type_name]
        key = key_members[name[0]]
        if key not in type:
            type[key] = {}
        type[key][member_name] = item


def parse_summary(member, type):
    for summary in member.iter(key_summary):
        summary_text = re.sub('\\s+', ' ', summary.text.strip())
        type[key_summary] = summary_text


def split_name(name):
    end = name.rfind('(')
    end = name.rfind('.', 0, end)
    type_name = name[:end].split('.')[-1]
    member_name = name[end + 1:].replace('#ctor', 'Constructor')
    return (type_name, member_name)


def generate_md(types):
    with open('visualization.md', 'w') as md:
        md.write("""---
layout: home
nav_order: 4
---

# Visualization API

SeedLang supports full-stack visualization with a set of event-based .Net APIs.""")
        for name, type in types.items():
            md.write(f'\n\n## {name}')
            md.write(f'\n\n{type[key_summary]}')
            for key in key_members.values():
                if key in type:
                    for field_name, field in type[key].items():
                        md.write(f'\n\n### {field_name}')
                        md.write(f'\n\n{field[key_summary]}')
        md.write('\n')


types = {}
parse('../csharp/src/SeedLang/bin/Debug/net6.0/SeedLang.xml', types)
generate_md(types)
