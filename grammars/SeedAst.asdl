--
-- Copyright 2021-2022 The SeedV Lab.
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- Each AST node has a Range member to indicate the block or text range of this node, which is ignored in following
-- definitions.
module SeedAst {
  Statement = AssignmentStatement(IdentifierExpression identifier, Expression expr)
    | BlockStatement(Statement* statements)
    | ExpressionStatement(Expression expr)
    | FunctionStatement(string name, IdentifierExpression* args, BlockStatement body)
    | IfStatement(Expression test, Statement thenBody, Statement elseBody)
    | ReturnStatement(Expression value)
    | WhileStatement(Expression test, Statement body)

  Expression = BinaryExpression(Expression left, BinaryOperator op, Expression right)
    | BooleanExpression(BooleanOperator op, Expression* exprs)
    | ComparisonExpression(Expression first, ComparisonOperator* ops, Expression* exprs)
    | UnaryExpression(UnaryOperator op, Expression expr)

    | IdentifierExpression(string name)

    | BooleanConstantExpression(bool value)
    | NoneConstantExpression()
    | NumberConstantExpression(doubel value)
    | StringConstantExpression(string value)

    | ListExpression(Expression* exprs)
    | SubscriptExpression(Expression expr, Expression index)

    | CallExpression(string name, Expression* args)

  BinaryOperator = Add | Subtract | Multiply | Divide | FloorDivide
  BooleanOperator = And | Or
  ComparisonOperator = Less | LessEqual | Greater | GreaterEqual | EqEqual | NotEqual
  UnaryOperator = Positive | Nagetive | Not
}
