{
  "$comment": "Copyright 2021 The Aha001 Team.\nLicensed under the Apache License, Version 2.0",
  "$id": "https://www.aha001.com/seedlang/schemas/v0.1/bxf.schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Block Exchange Format v0.1",
  "description": "The block exchange format of SeedLang.",
  "type": "object",
  "required": ["schema", "version", "module"],
  "additionalProperties": false,
  "properties": {
    "schema": {
      "const": "bxf"
    },
    "version": {
      "const": "v0.1"
    },
    "author": {
      "type": "string"
    },
    "copyright": {
      "type": "string"
    },
    "license": {
      "type": "string"
    },
    "module": {
      "type": "object",
      "required": ["name", "blocks"],
      "properties": {
        "name": {
          "$comment": "Module names are valid identifiers in SeedBlock.",
          "type": "string"
        },
        "doc": {
          "$comment": "The description of the module.",
          "type": "string"
        },
        "blocks": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/block"
          }
        }
      }
    }
  },
  "$defs": {
    "canvasPosition": {
      "$comment": "A block's position is defined by (x, y) coordinates when it is not docked to another block.",
      "type": "object",
      "required": ["x", "y"],
      "additionalProperties": false,
      "properties": {
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        }
      }
    },
    "dockPosition": {
      "$comment": "A block's position is defined by the docking relationship when it is docked to another block.",
      "type": "object",
      "required": ["targetBlockId", "dockType"],
      "additionalProperties": false,
      "properties": {
        "targetBlockId": {
          "$comment": "The target block that the current block docks to.",
          "type": "string"
        },
        "dockType": {
          "$comment": "The current block can be an input, the next statement or the first child statement of the target block.",
          "enum": ["input", "nextStatement", "childStatement"]
        },
        "dockSlotIndex": {
          "$comment": "The zero-based index of the dock slot.",
          "type": "number"
        }
      }
    },
    "block": {
      "type": "object",
      "required": ["id", "type"],
      "additionalProperties": false,
      "properties": {
        "id": {
          "$comment": "The block id should be unique in the current module.",
          "type": "string"
        },
        "type": {
          "$comment": "The type of the block.",
          "type": "string"
        },
        "doc": {
          "$comment": "The description of the block.",
          "type": "string"
        },
        "content": {
          "$comment": "The value or name of primitive blocks. E.g. \"3\" for a number block, \"+\" for an arithmetic operator block.",
          "type": "string"
        },
        "canvasPosition": {
          "$ref": "#/$defs/canvasPosition"
        },
        "dockPosition": {
          "$ref": "#/$defs/dockPosition"
        }
      }
    }
  }
}
